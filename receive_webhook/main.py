# O que √© um webhook?
# Um webhook √© uma maneira de um aplicativo fornecer informa√ß√µes em tempo real para outros aplicativos.
# Ele √© um "gancho" que permite que um aplicativo envie dados automaticamente para outro aplicativo quando um evento espec√≠fico ocorre.

# Nesse exemplo, vou usar o site webhook.site para criar um webhook e receber um envio POST dele.

from flask import Flask, request, jsonify

# Criando a aplica√ß√£o Flask
app = Flask(__name__)
# O 'methods=['POST']' significa que esta rota s√≥ aceita requisi√ß√µes do tipo POST.
@app.route('/receive_data', methods=['POST'])

# Fun√ß√£o que ser√° executada quando o webhook for chamado.
def webhook_receive():
    print("üöÄ Webhook recebido!")

    # Por padr√£o, os dados enviados em um webhook podem estar em diferentes formatos, mas o mais comum √© JSON.
    # Vamos verificar isso no parametro 'request' do Flask.
    if request.is_json:
        data = request.get_json()
        print("Dados recebidos (JSON):")
        print(data)
        
        # Vamos fazer algo simples com os dados recebidos.
        if 'nome' in data:
            print(f"Ol√°, {data['nome']}!")

        # Retorna uma resposta de sucesso em JSON
        return jsonify({"status": "sucesso", "mensagem": "Dados recebidos com sucesso!"}), 200
    else:
        # Se os dados n√£o forem JSON
        data = request.data.decode('utf-8')
        print("Dados recebidos (n√£o-JSON):")
        print(data)
        return jsonify({"status": "sucesso", "mensagem": "Dados brutos recebidos com sucesso!"}), 200

# Uma esp√©cie de While True para manter o servidor rodando.
if __name__ == '__main__':
    # Por padr√£o roda na porta 5000
    app.run(debug=True)